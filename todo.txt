Todo:
    Introduce BigDecimal done
    Remove Maps from Event done

    Optimize BigDecimal
    Solve bugs
    Add [constant?] latency to exchange and local processing [both take time to execute code]


Todo:
    Refactor order and position variable names - 'done'
    Abstract position creation in separate class
    Convert data to binary
    Fixme: If we don't place a stop order the local logic will fuck up the funds I guess basically it's all fucked everywhere
    Fixme: Are we adding the newly created borrowed funds order interest to total interest? Are we doing it even when we don't borrow?
    Todo: Binance won't borrow funds if enough assets are available, even for limit orders which won't get executed if at time of filling there aren't enough free funds. I don't think I'm handling that correctly in the local logic
    Fixme: Introduce roundings to BTC values (5 decimals) and USDT (2 decimals) to avoid getting e-12 differences in price. Ideally we convert them to BigDecimal at the cost of time.
    Todo: Replace action request and action response singleton maps with a simpler, lower overhead type (class perhaps)

Testing:
    Solved opening a market order, closing it on stoploss, and market exit. Also repaying. both on long and short
    Solved opening a limit order, cancelling a limit order right after opening (and paying interest), both on long and short
    Solved opening a limit order, filling it and TP'ing it on both long and short
    Solved opening a limit order and SL'ing on BE + some, with profit, both long and short

    TODO: Position counts profit correctly but userAssets are still fucked.

Todo:
    Add closed before stoploss in an action response. Make sure that on repay we actually repay the extra we lost, not just original position value

    Implement latency walls. Define what they mean first.

    Binance.java
        Implement isolated margin leverage adjustment when calculating the maximum amount of funds we can borrow
            Here we go
        Fix using MARGIN_BUY when enough funds is in our account (Binance won't borrow then). Refer to changelog
        Replace linear orderbook model with a square root market impact (later)
        Check and complete Binance code for non-automatic borrowings (later)
            Implement order triggers on self-made slippage (later)

    LocalStrategy.java
        Map action responses with action request types so when we receive a response we know which action we sent.
        Interest calculation based on position, except when using automatic repay on cancel, and we cancel the position.
        Local position closing, filling, profit calculation, etc...
        Handling all responses

    Order.java
        Change order IDs to use unique IDs instead of incremental numbers to simulate the fucked up nature of random IDs. (later)

Done:
    Transactions now load sequentially - on each exchange transaction event the next transaction event is loaded to the exchange and the current transaction event is placed in a local queue.
    Edited TransactionLoader to process relative transaction values, lowering sizes of files by 33%
    Implemented Events. Instead of iterating over transactions each event (action, request, transaction, and user data stream) is added to a queue and executed at the time of the event + the time it took to reach its destination (latency).
    Edited binance transaction latency testing to output all transactions to a file with a 'wall' flag - running on AWS Tokyo EC2 - results gathered
    Matched Order and Position arguments (seems so)
    Converted Candle to record
    Edited CandleConstructor to handle record Candle (test profusely.)